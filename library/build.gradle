plugins {
    alias libs.plugins.android.library
    alias libs.plugins.kotlin.android
    id 'maven-publish'
}

def githubProperties = new Properties()
githubProperties.load(new FileInputStream(rootProject.file("github.properties"))) //Set env variable GPR_USER & GPR_API_KEY if not adding a properties file

def getVersion = { ->
    return "1.0.0" // Replace with version Name
}

def getArtifactId = { ->
    return "library"
}

publishing {
    publications {
        bar(MavenPublication) {
//            groupId 'com.github.fmaxx.stopwatch'
            groupId 'library'
            artifactId getArtifactId()
            version getVersion()
            artifact("$buildDir/outputs/aar/${getArtifactId()}-release.aar")

            //generate .pom file with transitive dependencies
            pom.withXml {
                final dependenciesNode = asNode().appendNode('dependencies')
                ext.addDependency = { Dependency dep, String scope ->
                    if (dep.group == null || dep.version == null || dep.name == null || dep.name == "unspecified")
                        return
                    final dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', dep.group)
                    dependencyNode.appendNode('artifactId', dep.name)
                    dependencyNode.appendNode('version', dep.version)
                    dependencyNode.appendNode('scope', scope)
                    if (!dep.transitive) {
                        final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                        exclusionNode.appendNode('groupId', '*')
                        exclusionNode.appendNode('artifactId', '*')
                    } else if (!dep.properties.excludeRules.empty) {
                        final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                        dep.properties.excludeRules.each { ExcludeRule rule ->
                            exclusionNode.appendNode('groupId', rule.group ?: '*')
                            exclusionNode.appendNode('artifactId', rule.module ?: '*')
                        }
                    }
                }
                configurations.api.getDependencies().each { dep -> addDependency(dep, "api") }
                configurations.implementation.getDependencies().each { dep -> addDependency(dep, "implementation") }
            }
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            /** Configure path of your package repository on Github
             ** Replace GITHUB_USERID with your/organisation Github userID
             ** and REPOSITORY with the repository name on GitHub
             */
            url = uri("https://maven.pkg.github.com/fmaxx/androidStopwatch")
            credentials {
                /** Create github.properties in root project folder file with
                 ** gpr.usr=GITHUB_USER_ID & gpr.key=PERSONAL_ACCESS_TOKEN
                 ** Set env variable GPR_USER & GPR_API_KEY if not adding a properties file**/

                username = githubProperties['gpr.usr'] ?: System.getenv("GPR_USER")
                password = githubProperties['gpr.key'] ?: System.getenv("GPR_API_KEY")
            }
        }
    }
}


// shared deps
apply from: "$rootProject.projectDir/base.gradle"

android {
    namespace 'com.github.fmaxx.stopwatch'
}

dependencies {
    implementation(libs.lifecycleViewmodelKtx)
}